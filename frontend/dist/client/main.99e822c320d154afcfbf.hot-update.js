webpackHotUpdate("main",{

/***/ "./src/shared/Content/rightSide/timerLogic.js":
/*!****************************************************!*\
  !*** ./src/shared/Content/rightSide/timerLogic.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useTimerLogic = void 0;\nvar react_1 = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nfunction useTimerLogic(initialMinutes, initialPauseMinutes, buttonData) {\n    var _a = (0, react_1.useState)(), startAt = _a[0], setStartAt = _a[1];\n    var now = useNow(100);\n    // const [initialWorkTime, setInitialWorkTime] = useState(initialMinutes * 60);\n    // const [initialPauseTime, setInitialPauseTime] = useState(initialPauseMinutes * 60);\n    // const [seconds, setSeconds] = useState(initialWorkTime);\n    // const [isActive, setIsActive] = useState(false);\n    // const [isCompleted, setIsCompleted] = useState(false);\n    // const [timerToggle, setTimerToggle] = useState('work');\n    // const [id, setId] = useState('');\n    // useEffect(() => {\n    //   setId(buttonData.id);\n    // }, [buttonData]);\n    // useEffect(() => {\n    //   setInitialWorkTime(initialMinutes * 60);\n    //   setSeconds(initialMinutes * 60);\n    // }, [initialMinutes]);\n    // useEffect(() => {\n    //   if (isActive) {\n    //     const intervalId = setInterval(() => {\n    //       setSeconds((prevSeconds) => prevSeconds - 1);\n    //     }, 1000);\n    //     return () => clearInterval(intervalId);\n    //   }\n    // }, [isActive]);\n    // useEffect(() => {\n    //   if (seconds === 0 && timerToggle === 'work') {\n    //     setIsActive(false);\n    //     setIsCompleted(true);\n    //     setTimeout(() => {\n    //       setTimerToggle('pause');\n    //       setSeconds(initialPauseTime);\n    //       setIsCompleted(false);\n    //       setIsActive(true);\n    //     }, 3000);\n    //   } else if (seconds === 0 && timerToggle === 'pause') {\n    //     setIsActive(false);\n    //     setTimeout(() => {\n    //       setIsCompleted(true);\n    //       setTimeout(() => {\n    //         setTimerToggle('work');\n    //         setSeconds(initialWorkTime);\n    //         setIsCompleted(false);\n    //         setIsActive(true);\n    //       }, 3000);\n    //     }, 4000);\n    //   }\n    // }, [seconds, timerToggle, initialPauseTime, initialWorkTime]);\n    // function plusMinutes() {\n    //   requestAnimationFrame(() => {\n    //     setInitialWorkTime((prevWorkTime) => prevWorkTime + 60);\n    //     setSeconds((prevSeconds) => prevSeconds + 60);\n    //   });\n    // }\n    // function handlePlusMinutesClick() {\n    //   plusMinutes();\n    // }\n    // const toggleTimer = () => {\n    //   setIsActive(!isActive);\n    // };\n    // const resetTimer = () => {\n    //   setIsActive(false);\n    //   setIsCompleted(false);\n    //   setSeconds(initialWorkTime);\n    // };\n    // const formatTime = (time) => {\n    //   if (time < 0) {\n    //     return \"00:00\";\n    //   }\n    //   const minutes = Math.floor(time / 60);\n    //   const remainingSeconds = time % 60;\n    //   return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n    // };\n    // return {\n    //   seconds,\n    //   isActive,\n    //   isCompleted,\n    //   timerToggle,\n    //   id,\n    //   handlePlusMinutesClick,\n    //   toggleTimer,\n    //   resetTimer,\n    //   formatTime,\n    // };\n}\nexports.useTimerLogic = useTimerLogic;\n\n\n//# sourceURL=webpack:///./src/shared/Content/rightSide/timerLogic.js?");

/***/ })

})