webpackHotUpdate("main",{

/***/ "./src/shared/Content/rightSide/timerLogic.js":
/*!****************************************************!*\
  !*** ./src/shared/Content/rightSide/timerLogic.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useTimerLogic = void 0;\nvar react_1 = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nfunction useTimerLogic() {\n    var _a = (0, react_1.useState)(), startAt = _a[0], setStartAt = _a[1];\n    var _b = (0, react_1.useState)(false), isActive = _b[0], setIsActive = _b[1];\n    var _c = (0, react_1.useState)(false), isCompleted = _c[0], setIsCompleted = _c[1];\n    var _d = (0, react_1.useState)('work'), timerToggleValue = _d[0], setTimerToggleValue = _d[1];\n    //определяю now\n    var now = useNow(1000, startAt);\n    var fromStart = now - (startAt !== null && startAt !== void 0 ? startAt : now);\n    var countDoun = Math.max(0, 60000 - fromStart);\n    // ставлю выключатель\n    var toggleTimer = function () {\n        if (startAt) {\n            setStartAt();\n        }\n        else {\n            setStartAt(Date.now());\n        }\n    };\n    //определяю окончание таймера\n    var isCountEnd = countDoun === 0;\n    // остальные функции\n    var toggleWork = function (value) {\n        setIsActive(false);\n        setIsCompleted(true);\n        setTimerToggleValue(value);\n    };\n    function plusMinutes() {\n        requestAnimationFrame(function () {\n            setInitialWorkTime(function (prevWorkTime) { return prevWorkTime + 60000; });\n            setSeconds(function (prevSeconds) { return prevSeconds + 60000; });\n        });\n    }\n    function handlePlusMinutesClick() {\n        plusMinutes();\n    }\n    var formatTime = function (time) {\n        //   if (time < 0) {\n        //     return \"00:00\";\n        //   }\n        //   const minutes = Math.floor(time / 60);\n        //   const remainingSeconds = time % 60;\n        //   return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n        // };\n        // переключаю таймер\n        (0, react_1.useEffect)(function () {\n            if (isCountEnd && timerToggleValue === 'work') {\n                console.log(\"let's get some rest\");\n                toggleWork('pause');\n            }\n            else if (seconds === 0 && timerToggleValue === 'pause') {\n                console.log(\"let's work\");\n                toggleWork('work');\n            }\n        }, [isCountEnd]);\n        var timer = Math.ceil(countDoun / 1000);\n        return {\n            toggleTimer: toggleTimer,\n            startAt: startAt,\n            handlePlusMinutesClick: handlePlusMinutesClick,\n            timer: timer\n        };\n        // const [initialWorkTime, setInitialWorkTime] = useState(initialMinutes * 60);\n        // const [initialPauseTime, setInitialPauseTime] = useState(initialPauseMinutes * 60);\n        // const [seconds, setSeconds] = useState(initialWorkTime);\n        // const [isActive, setIsActive] = useState(false);\n        // const [isCompleted, setIsCompleted] = useState(false);\n        // const [timerToggle, setTimerToggle] = useState('work');\n        // const [id, setId] = useState('');\n        // useEffect(() => {\n        //   setId(buttonData.id);\n        // }, [buttonData]);\n        // useEffect(() => {\n        //   setInitialWorkTime(initialMinutes * 60);\n        //   setSeconds(initialMinutes * 60);\n        // }, [initialMinutes]);\n        // useEffect(() => {\n        //   if (isActive) {\n        //     const intervalId = setInterval(() => {\n        //       setSeconds((prevSeconds) => prevSeconds - 1);\n        //     }, 1000);\n        //     return () => clearInterval(intervalId);\n        //   }\n        // }, [isActive]);\n        // useEffect(() => {\n        //   if (seconds === 0 && timerToggle === 'work') {\n        //     setIsActive(false);\n        //     setIsCompleted(true);\n        //     setTimeout(() => {\n        //       setTimerToggle('pause');\n        //       setSeconds(initialPauseTime);\n        //       setIsCompleted(false);\n        //       setIsActive(true);\n        //     }, 3000);\n        //   } else if (seconds === 0 && timerToggle === 'pause') {\n        //     setIsActive(false);\n        //     setTimeout(() => {\n        //       setIsCompleted(true);\n        //       setTimeout(() => {\n        //         setTimerToggle('work');\n        //         setSeconds(initialWorkTime);\n        //         setIsCompleted(false);\n        //         setIsActive(true);\n        //       }, 3000);\n        //     }, 4000);\n        //   }\n        // }, [seconds, timerToggle, initialPauseTime, initialWorkTime]);\n        // function plusMinutes() {\n        //   requestAnimationFrame(() => {\n        //     setInitialWorkTime((prevWorkTime) => prevWorkTime + 60);\n        //     setSeconds((prevSeconds) => prevSeconds + 60);\n        //   });\n        // }\n        // function handlePlusMinutesClick() {\n        //   plusMinutes();\n        // }\n        // const toggleTimer = () => {\n        //   setIsActive(!isActive);\n        // };\n        // const resetTimer = () => {\n        //   setIsActive(false);\n        //   setIsCompleted(false);\n        //   setSeconds(initialWorkTime);\n        // };\n        // const formatTime = (time) => {\n        //   if (time < 0) {\n        //     return \"00:00\";\n        //   }\n        //   const minutes = Math.floor(time / 60);\n        //   const remainingSeconds = time % 60;\n        //   return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n        // };\n        // return {\n        //   seconds,\n        //   isActive,\n        //   isCompleted,\n        //   timerToggle,\n        //   id,\n        //   handlePlusMinutesClick,\n        //   toggleTimer,\n        //   resetTimer,\n        //   formatTime,\n        // };\n    };\n}\nexports.useTimerLogic = useTimerLogic;\n\n\n//# sourceURL=webpack:///./src/shared/Content/rightSide/timerLogic.js?");

/***/ })

})